console.log("initializeApp() called. Starting the application.");

// --- CONFIGURATION ---
// const DEFAULT_CLIENT_ID = '0ce23956cd444ec58ab849e2acdb12d3'; // No longer needed
const REDIRECT_URI = 'https://ai-musician-list.tanzstoff.de/';
const ADMIN_EMAIL = 'admin@example.com';

// --- API BASE URL (automatisch relativ zur Domain/Wurzel) ---
const API_BASE = '/api';

let accessToken = null;
let blockedArtistIds = new Set();
let isMonitoring = false;
let monitoringInterval = null;
let currentTrackId = null;
let debounceTimer = null;
let votedForIds = new Set(JSON.parse(localStorage.getItem('voted_for_ids') || '[]'));
let allArtists = []; // Cache for all artists to enable searching

// --- DYNAMIC CLIENT ID HANDLING ---
let userClientId = localStorage.getItem('user_spotify_client_id') || null;
if (userClientId) {
    const input = document.getElementById('user-client-id');
    if (input) {
        input.value = userClientId;
    }
    // Enable the connect button if an ID is already saved
    document.getElementById('connect-spotify').disabled = false;
    // Also enable the download button
    document.getElementById('download-script-btn').disabled = false;
    // Hide the setup guide if an ID is already saved
    const setupGuide = document.querySelector('.setup-guide');
    if (setupGuide) {
        setupGuide.style.display = 'none';
    }
}

// --- SETUP LISTENERS & INITIAL LOAD ---
console.log("Setting up event listeners.");
document.getElementById('connect-spotify').addEventListener('click', redirectToSpotify);
document.getElementById('toggle-monitoring').addEventListener('click', toggleMonitoring);
document.getElementById('logout-btn').addEventListener('click', handleLogout);
document.getElementById('download-script-btn').addEventListener('click', downloadPersonalizedScript);
document.getElementById('save-client-id-btn').addEventListener('click', () => {
    const input = document.getElementById('user-client-id');
    const newClientId = input.value.trim();
    if (newClientId && newClientId.length === 32) {
        localStorage.setItem('user_spotify_client_id', newClientId);
        userClientId = newClientId;
        alert('Client ID saved! You can now connect to Spotify.');
        input.style.borderColor = 'var(--primary-color)';
        document.getElementById('connect-spotify').disabled = false; // Enable connect button
        document.getElementById('download-script-btn').disabled = false; // Enable download button
        document.getElementById('script-guide').style.display = 'block'; // Show the script guide
    } else {
        alert('Please enter a valid 32-character Spotify Client ID.');
        input.style.borderColor = 'var(--danger-color)';
        document.getElementById('connect-spotify').disabled = true; // Keep disabled
        document.getElementById('download-script-btn').disabled = true; // Keep disabled
    }
});
document.getElementById('submission-form').addEventListener('submit', handleSubmission);
document.getElementById('spotify-link').addEventListener('input', handleSpotifyLinkInput);
document.getElementById('search-input').addEventListener('input', handleSearch);

console.log("Performing initial data load.");
loadArtists();
loadCommunitySubmissions();
handlePageLoad();


// --- AUTHENTICATION & SETUP ---
async function handlePageLoad() {
    const params = new URLSearchParams(window.location.search);
    const code = params.get('code');

    if (code) {
        // We have a code, now we need to exchange it for a token
        const codeVerifier = localStorage.getItem('code_verifier');
        if (!codeVerifier) {
            console.error("Code verifier not found in localStorage.");
            alert("Authentication error: Could not verify the request. Please try logging in again.");
            return;
        }

        try {
            const response = await fetch(`${API_BASE}/exchange-token`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    code: code,
                    code_verifier: codeVerifier,
                    client_id: userClientId // Now always uses the user's client ID
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to exchange token.');
            }

            const { access_token, expires_in } = await response.json();
            accessToken = access_token;
            const expiryTime = Date.now() + expires_in * 1000;
            localStorage.setItem('spotify_access_token', accessToken);
            localStorage.setItem('spotify_token_expiry', expiryTime);
            localStorage.removeItem('code_verifier'); // Clean up

            history.pushState("", document.title, window.location.pathname); // Clean URL
            console.log("New token received and stored via PKCE flow.");
            await onLoginSuccess();
            return;

        } catch (err) {
            console.error("Error exchanging token:", err);
            alert(`Authentication failed: ${err.message}`);
            return;
        }
    }

    const storedToken = localStorage.getItem('spotify_access_token');
    const tokenExpiry = localStorage.getItem('spotify_token_expiry');

    if (storedToken && tokenExpiry && Date.now() < tokenExpiry) {
        accessToken = storedToken;
        console.log("Found valid token in localStorage.");
        await onLoginSuccess();
    } else {
        console.log("No valid token found. User needs to connect.");
        localStorage.removeItem('spotify_access_token');
        localStorage.removeItem('spotify_token_expiry');
    }
}

// --- PKCE HELPER FUNCTIONS ---
function generateRandomString(length) {
    let text = '';
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}

async function generateCodeChallenge(codeVerifier) {
    const data = new TextEncoder().encode(codeVerifier);
    const digest = await window.crypto.subtle.digest('SHA-256', data);
    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
}

async function redirectToSpotify() {
    if (!userClientId) {
        alert('Please save a valid Spotify Client ID first.');
        return;
    }
    const codeVerifier = generateRandomString(128);
    const codeChallenge = await generateCodeChallenge(codeVerifier);
    const scope = 'user-read-playback-state user-modify-playback-state';

    localStorage.setItem('code_verifier', codeVerifier);

    const args = new URLSearchParams({
        response_type: 'code',
        client_id: userClientId,
        scope: scope,
        redirect_uri: REDIRECT_URI,
        code_challenge_method: 'S256',
        code_challenge: codeChallenge
    });

    console.log("Redirecting to Spotify for PKCE flow...");
    window.location = 'https://accounts.spotify.com/authorize?' + args;
}

async function onLoginSuccess() {
    document.getElementById('browser-mode-box').style.display = 'none'; // Hide only the browser connect box
    document.getElementById('monitoring-section').style.display = 'block';
    updateStatus('Ready to start monitoring.');
}

async function downloadPersonalizedScript() {
    if (!userClientId) {
        alert('Please save your Client ID before downloading the script.');
        return;
    }
    try {
        // Add a cache-busting query parameter to ensure the latest version is always downloaded
        const response = await fetch(`watcher.py?v=${Date.now()}`);
        if (!response.ok) throw new Error('Could not load the script template.');
        let scriptContent = await response.text();

        scriptContent = scriptContent.replace("YOUR_32_CHARACTER_CLIENT_ID_HERE", userClientId);

        const blob = new Blob([scriptContent], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'watcher.py';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

    } catch (err) {
        console.error('Error creating download script:', err);
        alert('An error occurred while preparing the download. Please try again.');
    }
}

function handleLogout() {
    localStorage.removeItem('spotify_access_token');
    localStorage.removeItem('spotify_token_expiry');
    accessToken = null;
    isMonitoring = false;
    clearInterval(monitoringInterval);

    document.getElementById('browser-mode-box').style.display = 'block'; // Show the connect box again
    document.getElementById('monitoring-section').style.display = 'none';
    updateStatus('Logged out.');
}


// --- CORE FEATURES ---
async function loadArtists() {
    try {
        console.log("Fetching artists from", API_BASE + '/artists');
        const response = await fetch(API_BASE + '/artists');

        if (!response.ok) {
            throw new Error(`HTTP ${response.status} â€“ ${response.statusText}`);
        }

        const data = await response.json();
        if (!data.artists) {
            throw new Error("Missing `artists` array in response JSON.");
        }

        allArtists = data.artists; // Cache the full list
        blockedArtistIds = new Set(allArtists.map(a => a.spotify_id));
        console.log("Blocked artist IDs loaded:", blockedArtistIds);

        renderArtists(allArtists); // Render the full list initially

    } catch (err) {
        console.error('Could not load artists:', err);
        document.querySelector('#artists-table tbody').innerHTML
            = '<tr><td colspan="2">Could not load artist list. See console for details.</td></tr>';
    }
}

function renderArtists(artists) {
    const tableBody = document.querySelector('#artists-table tbody');
    tableBody.innerHTML = '';

    // Filter out the artist with ID 0 (your test account) before rendering
    const visibleArtists = artists.filter(artist => artist.id !== 0);

    if (visibleArtists.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="2">No matching artists found.</td></tr>';
        return;
    }
    visibleArtists.forEach(artist => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${artist.name}</td>
            <td><a href="https://open.spotify.com/artist/${artist.spotify_id}" target="_blank">View on Spotify</a></td>
        `;
        tableBody.appendChild(row);
    });
}

function handleSearch(evt) {
    const searchTerm = evt.target.value.toLowerCase();
    const filteredArtists = allArtists.filter(artist =>
        artist.name.toLowerCase().includes(searchTerm)
    );
    renderArtists(filteredArtists);
}

async function loadCommunitySubmissions() {
    const listDiv = document.getElementById('community-artists-list');
    listDiv.innerHTML = '<p>Loading community submissions...</p>';
    try {
        const response = await fetch(API_BASE + '/submissions');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();

        if (!data.submissions || data.submissions.length === 0) {
            document.getElementById('community-watchlist').style.display = 'none';
            return;
        }

        document.getElementById('community-watchlist').style.display = 'block';
        listDiv.innerHTML = '';

        data.submissions.forEach(submission => {
            const hasVoted = votedForIds.has(submission.id.toString());
            const card = document.createElement('div');
            card.className = 'community-card';
            card.innerHTML = `
                <div class="info">
                    <h4>${submission.name}</h4>
                    <p><a href="https://open.spotify.com/artist/${submission.spotify_id}" target="_blank">View on Spotify</a></p>
                </div>
                <div class="vote-section">
                    <button class="vote-btn" data-id="${submission.id}" ${hasVoted ? 'disabled' : ''}>
                        <i class="fas fa-check"></i> Vote
                    </button>
                    <span class="vote-count">${submission.votes} / 10 votes</span>
                </div>
            `;
            listDiv.appendChild(card);
        });

        document.querySelectorAll('.vote-btn').forEach(button => {
            button.addEventListener('click', handleVote);
        });

    } catch (err) {
        console.error('Could not load community submissions:', err);
        listDiv.innerHTML = '<p style="color: red;">Could not load community submissions.</p>';
    }
}

async function handleVote(evt) {
    const button = evt.currentTarget;
    const submissionId = button.dataset.id;

    if (votedForIds.has(submissionId)) {
        return; // Should not happen if button is disabled, but as a safeguard
    }

    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

    try {
        const response = await fetch(`${API_BASE}/submissions/${submissionId}/vote`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to cast vote.');
        }

        votedForIds.add(submissionId);
        localStorage.setItem('voted_for_ids', JSON.stringify(Array.from(votedForIds)));

        // Optimistically update UI
        const card = button.closest('.community-card');
        const voteCountSpan = card.querySelector('.vote-count');
        const currentVotes = parseInt(voteCountSpan.textContent) + 1;

        if (currentVotes >= 10) {
            card.style.transition = 'opacity 0.5s ease';
            card.style.opacity = '0';
            setTimeout(() => card.remove(), 500);
            loadArtists(); // Refresh the main artist list
        } else {
            voteCountSpan.textContent = `${currentVotes} / 10 votes`;
            button.innerHTML = '<i class="fas fa-check"></i> Voted';
        }

    } catch (err) {
        console.error('Error voting:', err);
        button.innerHTML = '<i class="fas fa-times"></i> Error';
        // Optionally re-enable the button after a delay
        setTimeout(() => {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-check"></i> Vote';
        }, 2000);
    }
}


function toggleMonitoring() {
    isMonitoring = !isMonitoring;
    const btn = document.getElementById('toggle-monitoring');

    if (isMonitoring) {
        btn.innerHTML = '<i class="fas fa-stop"></i> Stop Monitoring';
        btn.classList.add('active');
        updateStatus('Monitoring active...');
        checkCurrentlyPlaying();
        monitoringInterval = setInterval(checkCurrentlyPlaying, 5000);
    } else {
        btn.innerHTML = '<i class="fas fa-play"></i> Start Monitoring';
        btn.classList.remove('active');
        updateStatus('Monitoring stopped.');
        clearInterval(monitoringInterval);
        document.getElementById('current-track').textContent = 'None';
    }
}

async function checkCurrentlyPlaying() {
    if (!accessToken) {
        console.log("No access token â€“ skipping check.");
        return;
    }
    try {
        const res = await fetch('https://api.spotify.com/v1/me/player/currently-playing', {
            headers: { 'Authorization': `Bearer ${accessToken}` }
        });
        if (res.status === 204) {
            document.getElementById('current-track').textContent = 'Nothing is currently playing.';
            return;
        }
        if (res.status === 403) {
            // Specific error for users not on the app's allowlist
            const errorMessage = 'Access denied by Spotify. Your account is not registered as a tester for this app\'s development mode. Please use the "Advanced" option below to create and use your own Client ID.';
            alert(errorMessage); // Show a prominent alert
            handleTokenExpiration(errorMessage); // Log out with specific message
            return;
        }
        if (res.status === 401) {
            handleTokenExpiration(); // Log out with default message
            return;
        }
        if (!res.ok) throw new Error(`Spotify API ${res.statusText}`);

        const data = await res.json();
        if (!data.item) return;

        const track = data.item;
        const artists = track.artists.map(a => ({ name: a.name, id: a.id }));
        const artistIds = new Set(artists.map(a => a.id));

        console.log(`Currently Playing: "${track.name}" by ${artists.map(a => a.name).join(', ')}`);
        console.log("Blocked IDs:", blockedArtistIds);

        document.getElementById('current-track')
            .textContent = `${track.name} by ${artists.map(a => a.name).join(', ')}`;

        if (track.id !== currentTrackId) {
            currentTrackId = track.id;
            const shouldBlock = artists.some(a => blockedArtistIds.has(a.id));
            console.log("Should block?", shouldBlock);
            if (shouldBlock) {
                updateStatus(`Blocked artist detected. Skipping "${track.name}"...`);
                await skipTrack();
            }
        }
    } catch (err) {
        console.error("Error checking currently playing track:", err);
        updateStatus('Error checking player state. Please try again.');
    }
}

async function skipTrack() {
    try {
        await fetch('https://api.spotify.com/v1/me/player/next', {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${accessToken}` }
        });
        console.log("Skip command sent.");
        // kurz warten, dann erneut prÃ¼fen
        setTimeout(() => { currentTrackId = null; checkCurrentlyPlaying(); }, 1000);
    } catch (err) {
        console.error("Error skipping track:", err);
        updateStatus('Failed to skip track.');
    }
}

// --- SUBMISSION FORM ---
async function handleSubmission(evt) {
    evt.preventDefault();
    const form = evt.target;
    const submitButton = form.querySelector('button[type="submit"]');
    const name = document.getElementById('artist-name').value;
    const link = document.getElementById('spotify-link').value;
    updateStatus('Submitting report...', true);

    // Disable button to prevent spam
    submitButton.disabled = true;

    const payload = { artistName: name, spotifyLink: link };
    console.log("Submitting to", API_BASE + '/submit', payload);

    try {
        const res = await fetch(API_BASE + '/submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const text = await res.text();
        console.log("Server responded:", res.status, res.statusText, text);

        const json = JSON.parse(text);
        if (!res.ok) throw new Error(json.message || 'Submission failed.');

        const successMessage = 'Thank you! Your submission has been received.';
        alert(successMessage); // Show a success alert
        updateStatus(successMessage);
        form.reset();
    } catch (err) {
        console.error("Submission error:", err);
        alert(`Error: ${err.message}`); // Also show an alert for errors
        updateStatus(`Error: ${err.message}`);
    } finally {
        // Start a 10-second cooldown
        let countdown = 10;
        submitButton.textContent = `Wait ${countdown}s`;
        const interval = setInterval(() => {
            countdown--;
            submitButton.textContent = `Wait ${countdown}s`;
            if (countdown <= 0) {
                clearInterval(interval);
                submitButton.disabled = false;
                submitButton.textContent = 'Submit Report';
            }
        }, 1000);
    }
}

// --- SPOTIFY LINK INPUT ---
async function handleSpotifyLinkInput(e) {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(async () => {
        const match = e.target.value.match(/artist\/([a-zA-Z0-9]+)/);
        if (!match) return;

        if (!accessToken) {
            updateStatus('Connect to Spotify to fetch artist names.');
            return;
        }
        updateStatus('Fetching artist info...', true);

        try {
            const res = await fetch(`https://api.spotify.com/v1/artists/${match[1]}`, {
                headers: { 'Authorization': `Bearer ${accessToken}` }
            });
            if (!res.ok) throw new Error('Could not fetch artist.');
            const data = await res.json();
            document.getElementById('artist-name').value = data.name;
            updateStatus(`Artist "${data.name}" found!`);
        } catch (err) {
            console.error(err);
            updateStatus(err.message);
            document.getElementById('artist-name').value = '';
        }
    }, 500);
}


// --- UTILITY ---
function updateStatus(msg, loading = false) {
    const el = document.getElementById('status');
    el.innerHTML = msg;
    el.className = loading ? 'loading' : '';
}

function handleTokenExpiration(reason) {
    localStorage.removeItem('spotify_access_token');
    localStorage.removeItem('spotify_token_expiry');
    accessToken = null;
    isMonitoring = false;
    clearInterval(monitoringInterval);

    const message = reason || 'Session expired. Please reconnect to Spotify.';
    updateStatus(message);
    document.getElementById('browser-mode-box').style.display = 'block'; // Show the connect box again
    document.getElementById('monitoring-section').style.display = 'none';
    const btn = document.getElementById('toggle-monitoring');
    btn.textContent = 'Start Monitoring';
    btn.classList.remove('active');
}
